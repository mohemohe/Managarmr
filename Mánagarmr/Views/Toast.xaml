<Window x:Class="Mánagarmr.Views.Toast"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:Mánagarmr.Views"
        xmlns:vm="clr-namespace:Mánagarmr.ViewModels"
        Title="Toast" Height="120" Width="380" ShowInTaskbar="False" ResizeMode="NoResize" Topmost="True" WindowStyle="None" Background="Transparent" AllowsTransparency="True" Opacity="{Binding Opacity}">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/Views/ToastDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>

    <Window.DataContext>
        <vm:ToastViewModel/>
    </Window.DataContext>

    <!--<Window.Triggers>
        <EventTrigger RoutedEvent="Window.Loaded">
            <BeginStoryboard>
                <Storyboard>
                    <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.5" FillBehavior="HoldEnd" />
                </Storyboard>
            </BeginStoryboard>
        </EventTrigger>
    </Window.Triggers>-->

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <i:EventTrigger EventName="MouseMove">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="TimerReset"/>
        </i:EventTrigger>

        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger, Mode=OneWay}">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>
        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Grid Background="#FF334455">
        <Grid HorizontalAlignment="Left" Width="120">
            <Image Source="{Binding AlbumCoverUrl, IsAsync=True}" />
        </Grid>
        <Grid Margin="125,0,0,0" Height="120" VerticalAlignment="Top">
            <Grid.RowDefinitions>
                <RowDefinition Height="2*"/>
                <RowDefinition Height="3*"/>
                <RowDefinition Height="2*"/>
            </Grid.RowDefinitions>
            <TextBlock TextWrapping="Wrap" Text="{Binding Artist}" Foreground="White" Grid.Row="0" VerticalAlignment="Bottom" FontSize="14"/>
            <TextBlock TextWrapping="Wrap" Text="{Binding Title}" Foreground="White" Grid.Row="1" VerticalAlignment="Center" FontSize="20"/>
            <TextBlock TextWrapping="Wrap" Text="{Binding Album}" Foreground="White" Grid.Row="2" VerticalAlignment="Top" FontSize="14"/>
            <Button Command="{Binding CloseCommand}" HorizontalAlignment="Right" Margin="0,0,0,0" VerticalAlignment="Top" Width="24" Height="24"  Style="{DynamicResource DummyStyle}" Foreground="{x:Null}" Background="{x:Null}" BorderBrush="{x:Null}">
                <Rectangle Fill="White" Width="16" Height="16">
                    <Rectangle.OpacityMask>
                        <VisualBrush Visual="{StaticResource appbar_close}" Stretch="Uniform" />
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Button>
        </Grid>
    </Grid>
</Window>
